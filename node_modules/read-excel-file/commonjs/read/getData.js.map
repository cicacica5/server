{"version":3,"sources":["../../source/read/getData.js"],"names":["getData","sheet","options","dimensions","cells","length","leftTop","rightBottom","colsCount","column","rowsCount","row","data","Array","i","j","cell","rowIndex","columnIndex","value","rowMap","onlyTrimAtTheEnd","transformData"],"mappings":";;;;;;;AAAA;;AACA;;;;;;;;;;;;;;;;;;AAEe,SAASA,OAAT,CAAiBC,KAAjB,EAAwBC,OAAxB,EAAiC;AAC9C,MAAQC,UAAR,GAA8BF,KAA9B,CAAQE,UAAR;AAAA,MAAoBC,KAApB,GAA8BH,KAA9B,CAAoBG,KAApB,CAD8C,CAG9C;;AACA,MAAIA,KAAK,CAACC,MAAN,KAAiB,CAArB,EAAwB;AACtB,WAAO,EAAP;AACD;;AAED,mCAA+BF,UAA/B;AAAA,MAAOG,OAAP;AAAA,MAAgBC,WAAhB,kBAR8C,CAU9C;AACA;AACA;AACA;;;AAEA,MAAMC,SAAS,GAAGD,WAAW,CAACE,MAA9B;AACA,MAAMC,SAAS,GAAGH,WAAW,CAACI,GAA9B,CAhB8C,CAkB9C;;AACA,MAAIC,IAAI,GAAG,IAAIC,KAAJ,CAAUH,SAAV,CAAX;AACA,MAAII,CAAC,GAAG,CAAR;;AACA,SAAOA,CAAC,GAAGJ,SAAX,EAAsB;AACpBE,IAAAA,IAAI,CAACE,CAAD,CAAJ,GAAU,IAAID,KAAJ,CAAUL,SAAV,CAAV;AACA,QAAIO,CAAC,GAAG,CAAR;;AACA,WAAOA,CAAC,GAAGP,SAAX,EAAsB;AACpBI,MAAAA,IAAI,CAACE,CAAD,CAAJ,CAAQC,CAAR,IAAa,IAAb;AACAA,MAAAA,CAAC;AACF;;AACDD,IAAAA,CAAC;AACF,GA7B6C,CA+B9C;AACA;AACA;AACA;;;AACA,uDAAmBV,KAAnB,wCAA0B;AAAA,QAAfY,IAAe;AACxB;AACA;AACA;AACA;AACA,QAAMC,QAAQ,GAAGD,IAAI,CAACL,GAAL,GAAW,CAA5B;AACA,QAAMO,WAAW,GAAGF,IAAI,CAACP,MAAL,GAAc,CAAlC,CANwB,CAOxB;;AACA,QAAIS,WAAW,GAAGV,SAAd,IAA2BS,QAAQ,GAAGP,SAA1C,EAAqD;AACnDE,MAAAA,IAAI,CAACK,QAAD,CAAJ,CAAeC,WAAf,IAA8BF,IAAI,CAACG,KAAnC;AACD;AACF,GA9C6C,CAgD9C;;;AACA,MAAQC,MAAR,GAAmBlB,OAAnB,CAAQkB,MAAR;;AACA,MAAIA,MAAJ,EAAY;AACV,QAAIN,GAAC,GAAG,CAAR;;AACA,WAAOA,GAAC,GAAGF,IAAI,CAACP,MAAhB,EAAwB;AACtBe,MAAAA,MAAM,CAACN,GAAD,CAAN,GAAYA,GAAZ;AACAA,MAAAA,GAAC;AACF;AACF,GAxD6C,CA0D9C;;;AACAF,EAAAA,IAAI,GAAG,+BACL,kCAAiBA,IAAjB,EAAuB;AAAES,IAAAA,gBAAgB,EAAE;AAApB,GAAvB,CADK,EAEL;AAAEA,IAAAA,gBAAgB,EAAE,IAApB;AAA0BD,IAAAA,MAAM,EAANA;AAA1B,GAFK,CAAP,CA3D8C,CAgE9C;;AACA,MAAIlB,OAAO,CAACoB,aAAZ,EAA2B;AACzBV,IAAAA,IAAI,GAAGV,OAAO,CAACoB,aAAR,CAAsBV,IAAtB,CAAP,CADyB,CAEzB;AACA;AACA;AACA;AACA;AACD;;AAED,SAAOA,IAAP;AACD","sourcesContent":["import dropEmptyRows from './dropEmptyRows'\r\nimport dropEmptyColumns from './dropEmptyColumns'\r\n\r\nexport default function getData(sheet, options) {\r\n  const { dimensions, cells } = sheet\r\n\r\n  // If the sheet is empty.\r\n  if (cells.length === 0) {\r\n    return []\r\n  }\r\n\r\n  const [leftTop, rightBottom] = dimensions\r\n\r\n  // Don't discard empty rows or columns at the start.\r\n  // https://github.com/catamphetamine/read-excel-file/issues/102\r\n  // const colsCount = (rightBottom.column - leftTop.column) + 1\r\n  // const rowsCount = (rightBottom.row - leftTop.row) + 1\r\n\r\n  const colsCount = rightBottom.column\r\n  const rowsCount = rightBottom.row\r\n\r\n  // Initialize spreadsheet data structure.\r\n  let data = new Array(rowsCount)\r\n  let i = 0\r\n  while (i < rowsCount) {\r\n    data[i] = new Array(colsCount)\r\n    let j = 0\r\n    while (j < colsCount) {\r\n      data[i][j] = null\r\n      j++\r\n    }\r\n    i++\r\n  }\r\n\r\n  // Fill in spreadsheet `data`.\r\n  // (this code implies that `cells` aren't necessarily sorted by row and column:\r\n  //  maybe that's not correct, this piece code was initially copy-pasted\r\n  //  from some other library that used `XPath`)\r\n  for (const cell of cells) {\r\n    // Don't discard empty rows or columns at the start.\r\n    // https://github.com/catamphetamine/read-excel-file/issues/102\r\n    // const rowIndex = cell.row - leftTop.row\r\n    // const columnIndex = cell.column - leftTop.column\r\n    const rowIndex = cell.row - 1\r\n    const columnIndex = cell.column - 1\r\n    // Ignore the data in the cell if it's outside of the spreadsheet's \"dimensions\".\r\n    if (columnIndex < colsCount && rowIndex < rowsCount) {\r\n      data[rowIndex][columnIndex] = cell.value\r\n    }\r\n  }\r\n\r\n  // Fill in the row map.\r\n  const { rowMap } = options\r\n  if (rowMap) {\r\n    let i = 0\r\n    while (i < data.length) {\r\n      rowMap[i] = i\r\n      i++\r\n    }\r\n  }\r\n\r\n  // Drop empty columns or rows.\r\n  data = dropEmptyRows(\r\n    dropEmptyColumns(data, { onlyTrimAtTheEnd: true }),\r\n    { onlyTrimAtTheEnd: true, rowMap }\r\n  )\r\n\r\n  // Optionally transform data before applying `schema`.\r\n  if (options.transformData) {\r\n    data = options.transformData(data)\r\n    // data = options.transformData(data, {\r\n    //   dropEmptyRowsAndColumns(data) {\r\n    //     return dropEmptyRows(dropEmptyColumns(data), { rowMap })\r\n    //   }\r\n    // })\r\n  }\r\n\r\n  return data\r\n}"],"file":"getData.js"}