{"version":3,"sources":["../../source/read/parseCellValue.js"],"names":["BUILT_IN_DATE_NUMBER_FORMAT_IDS","getCellValue","value","type","getInlineStringValue","getStyleId","styles","values","properties","options","trim","undefined","Error","parseInt","decodeError","Date","parseFloat","styleId","style","indexOf","numberFormat","id","dateFormat","template","smartDateParser","isDateTemplate","TypeError","errorCode","toLowerCase","tokens","split","token","DATE_TEMPLATE_TOKENS"],"mappings":"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","sourcesContent":["import parseDate from './parseDate'\r\n\r\n// https://hexdocs.pm/xlsxir/number_styles.html\r\nconst BUILT_IN_DATE_NUMBER_FORMAT_IDS = [14,15,16,17,18,19,20,21,22,27,30,36,45,46,47,50,57]\r\n\r\nexport default function getCellValue(value, type, {\r\n\tgetInlineStringValue,\r\n\tgetStyleId,\r\n\tstyles,\r\n\tvalues,\r\n\tproperties,\r\n\toptions\r\n}) {\r\n  if (!type) {\r\n    // Default cell type is \"n\" (numeric).\r\n    // http://www.datypic.com/sc/ooxml/t-ssml_CT_Cell.html\r\n    type = 'n'\r\n  }\r\n\r\n  // Available Excel cell types:\r\n  // https://github.com/SheetJS/sheetjs/blob/19620da30be2a7d7b9801938a0b9b1fd3c4c4b00/docbits/52_datatype.md\r\n  //\r\n  // Some other document (seems to be old):\r\n  // http://webapp.docx4java.org/OnlineDemo/ecma376/SpreadsheetML/ST_CellType.html\r\n  //\r\n  switch (type) {\r\n    // If the cell contains formula string.\r\n    case 'str':\r\n      value = value.trim()\r\n      if (value === '') {\r\n        value = undefined\r\n      }\r\n      break\r\n\r\n    // If the cell contains an \"inline\" (not \"shared\") string.\r\n    case 'inlineStr':\r\n      value = getInlineStringValue()\r\n      if (value === undefined) {\r\n        throw new Error(`Unsupported \"inline string\" cell value structure`) // : ${cellNode.textContent}`)\r\n      }\r\n      value = value.trim()\r\n      if (value === '') {\r\n        value = undefined\r\n      }\r\n      break\r\n\r\n    // If the cell contains a \"shared\" string.\r\n    // \"Shared\" strings is a way for an Excel editor to reduce\r\n    // the file size by storing \"commonly used\" strings in a dictionary\r\n    // and then referring to such strings by their index in that dictionary.\r\n    case 's':\r\n      // If a cell has no value then there's no `<c/>` element for it.\r\n      // If a `<c/>` element exists then it's not empty.\r\n      // The `<v/>`alue is a key in the \"shared strings\" dictionary of the\r\n      // XLSX file, so look it up in the `values` dictionary by the numeric key.\r\n      value = values[parseInt(value)]\r\n      value = value.trim()\r\n      if (value === '') {\r\n        value = undefined\r\n      }\r\n      break\r\n\r\n    case 'b':\r\n      value = value === '1' ? true : false\r\n      break\r\n\r\n    // Stub: blank stub cell that is ignored by data processing utilities.\r\n    case 'z':\r\n      value = undefined\r\n      break\r\n\r\n    // Error: `value` is a numeric code.\r\n    // They also wrote: \"and `w` property stores its common name\".\r\n    // It's unclear what they meant by that.\r\n    case 'e':\r\n      value = decodeError(value)\r\n      break\r\n\r\n    // Date: a string to be parsed as a date.\r\n    // (usually a string in \"ISO 8601\" format)\r\n    case 'd':\r\n      if (value === undefined) {\r\n        break\r\n      }\r\n      value = new Date(value)\r\n      break\r\n\r\n    case 'n':\r\n      if (value === undefined) {\r\n        break\r\n      }\r\n      value = parseFloat(value)\r\n      // XLSX does have \"d\" type for dates, but it's not commonly used.\r\n      // Instead, spreadsheets prefer using \"n\" type for dates for some reason.\r\n      //\r\n      // In such cases, sometimes a \"date\" type could be heuristically detected\r\n      // by looking at such numeric value \"format\" and seeing if it's a date-specific one.\r\n      // https://github.com/catamphetamine/read-excel-file/issues/3#issuecomment-395770777\r\n      //\r\n      // The list of generic numeric value \"formats\":\r\n      // https://xlsxwriter.readthedocs.io/format.html#format-set-num-format\r\n      //\r\n      const styleId = getStyleId()\r\n      if (styleId) {\r\n        // styleId = parseInt(styleId)\r\n        const style = styles[styleId]\r\n        if (!style) {\r\n          throw new Error(`Cell style not found: ${styleId}`)\r\n        }\r\n        if (BUILT_IN_DATE_NUMBER_FORMAT_IDS.indexOf(parseInt(style.numberFormat.id)) >= 0 ||\r\n          (options.dateFormat && style.numberFormat.template === options.dateFormat) ||\r\n          (options.smartDateParser !== false && style.numberFormat.template && isDateTemplate(style.numberFormat.template))) {\r\n          value = parseDate(value, properties)\r\n        }\r\n      }\r\n      break\r\n\r\n    default:\r\n      throw new TypeError(`Cell type not supported: ${type}`)\r\n  }\r\n\r\n  // Convert empty values to `null`.\r\n  if (value === undefined) {\r\n    value = null\r\n  }\r\n\r\n  return value\r\n}\r\n\r\n// Decodes numeric error code to a string code.\r\n// https://github.com/SheetJS/sheetjs/blob/19620da30be2a7d7b9801938a0b9b1fd3c4c4b00/docbits/52_datatype.md\r\nfunction decodeError(errorCode) {\r\n  // While the error values are determined by the application,\r\n  // the following are some example error values that could be used:\r\n  switch (errorCode) {\r\n    case 0x00:\r\n      return '#NULL!'\r\n    case 0x07:\r\n      return '#DIV/0!'\r\n    case 0x0F:\r\n      return '#VALUE!'\r\n    case 0x17:\r\n      return '#REF!'\r\n    case 0x1D:\r\n      return '#NAME?'\r\n    case 0x24:\r\n      return '#NUM!'\r\n    case 0x2A:\r\n      return '#N/A'\r\n    case 0x2B:\r\n      return '#GETTING_DATA'\r\n    default:\r\n      // Such error code doesn't exist. I made it up.\r\n      return `#ERROR_${errorCode}`\r\n  }\r\n}\r\n\r\nfunction isDateTemplate(template) {\r\n  // Date format tokens could be in upper case or in lower case.\r\n  // There seems to be no single standard.\r\n  // So lowercase the template first.\r\n  template = template.toLowerCase()\r\n  const tokens = template.split(/\\W+/)\r\n  for (const token of tokens) {\r\n    if (DATE_TEMPLATE_TOKENS.indexOf(token) < 0) {\r\n      return false\r\n    }\r\n  }\r\n  return true\r\n}\r\n\r\n// These tokens could be in upper case or in lower case.\r\n// There seems to be no single standard, so using lower case.\r\nconst DATE_TEMPLATE_TOKENS = [\r\n  // Seconds (min two digits). Example: \"05\".\r\n  'ss',\r\n  // Minutes (min two digits). Example: \"05\". Could also be \"Months\". Weird.\r\n  'mm',\r\n  // Hours. Example: \"1\".\r\n  'h',\r\n  // Hours (min two digits). Example: \"01\".\r\n  'hh',\r\n  // \"AM\" part of \"AM/PM\". Lowercased just in case.\r\n  'am',\r\n  // \"PM\" part of \"AM/PM\". Lowercased just in case.\r\n  'pm',\r\n  // Day. Example: \"1\"\r\n  'd',\r\n  // Day (min two digits). Example: \"01\"\r\n  'dd',\r\n  // Month (numeric). Example: \"1\".\r\n  'm',\r\n  // Month (numeric, min two digits). Example: \"01\". Could also be \"Minutes\". Weird.\r\n  'mm',\r\n  // Month (shortened month name). Example: \"Jan\".\r\n  'mmm',\r\n  // Month (full month name). Example: \"January\".\r\n  'mmmm',\r\n  // Two-digit year. Example: \"20\".\r\n  'yy',\r\n  // Full year. Example: \"2020\".\r\n  'yyyy'\r\n];"],"file":"parseCellValue.js"}